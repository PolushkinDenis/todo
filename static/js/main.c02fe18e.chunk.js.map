{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","App.js","reportWebVitals.js","store/todoReducer.js","store/index.js","index.js"],"names":["TodoItem","todo","useState","text","newText","setNewText","change","setChange","dispatch","useDispatch","className","Checkbox","checked","isComplete","id","name","onClick","type","payload","dataTime","sx","mt","style","display","e","mr","Typography","textDecoration","TextField","label","autoFocus","size","value","onChange","target","onBlur","length","newTodo","Button","variant","color","TodoList","setText","error","setError","useSelector","state","todos","useEffect","component","marginTop","textAlign","Card","CardContent","flex","margin","autoComplete","event","disabled","dateInMs","Date","now","time","toLocaleTimeString","ml","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","rootReducer","combineReducers","action","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c02fe18e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport \"./TodoItem.css\"\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\n\r\nconst TodoItem = ({ todo }) => {\r\n    const [newText, setNewText] = useState(todo.text); //новый текст при изменении todo\r\n    const [change, setChange] = useState(false) // переменная для контроля начала и конца изменения todo\r\n    const dispatch = useDispatch()\r\n\r\n    //удаление todo\r\n    const removeTodo = () => {\r\n        dispatch({ type: \"REMOVE_TODO\", payload: todo.dataTime })\r\n    }\r\n    //изменение состояния отметки (Выполнен или нет)\r\n    const changeCompleteTodo = () => {\r\n        dispatch({ type: \"COMPLETE_TODO\", payload: todo.dataTime })\r\n    }\r\n    //изменение todo\r\n    const changeTodo = () => {\r\n        setChange(false)\r\n        if(newText.length > 0){ //проверка на не пустую строку. Если не пустая - изменяем todo\r\n            const newTodo = {\r\n                text: newText,\r\n                dataTime: todo.dataTime\r\n            }\r\n            dispatch({ type: \"CHANGE_TODO\", payload: newTodo })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"item-flex\">\r\n            <Checkbox\r\n                checked={todo.isComplete}\r\n                id=\"isComplete\"\r\n                name=\"isComplete\"\r\n                onClick={changeCompleteTodo}\r\n                sx={{ mt: 1 }}\r\n            />\r\n            <div style={{\r\n                display: 'flex'\r\n            }}>\r\n                <BorderColorIcon \r\n                onClick={e => setChange(!change)}\r\n                sx={{mt: 2, mr: 2}}\r\n                />\r\n                <Typography\r\n                    sx={{\r\n                        textDecoration: todo.isComplete ? 'line-through' : 'none',\r\n                        display: change ? 'none' : 'flex',\r\n                        mt: 2\r\n                    }}\r\n                >\r\n                     {todo.text}\r\n                </Typography>\r\n                <TextField\r\n                    label=\"Изменение\"\r\n                    autoFocus\r\n                    size=\"small\"\r\n                    value={newText}\r\n                    onChange={e => setNewText(e.target.value)}\r\n                    onBlur={changeTodo}\r\n                    sx={{ display: change ? 'flex' : 'none' }}\r\n\r\n                />\r\n            </div>\r\n            <Typography\r\n                sx={{ mt: 2 }}>\r\n                Создан в {todo.dataTime}\r\n            </Typography>\r\n            <div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={e => setChange(false)}\r\n                    sx={{ mr: 2,  display: change ? 'inline ' : 'none', }}\r\n                >\r\n                    Изменить\r\n                </Button>\r\n                <DeleteIcon\r\n                    color=\"secondary\"\r\n                    onClick={removeTodo}\r\n                    sx={{ mt: 1 }}\r\n                >\r\n                    Удалить\r\n                </DeleteIcon>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TodoItem from \"../TodoItem/TodoItem.jsx\"\r\n\r\n// список всех todo\r\nconst TodoList = () => {\r\n    const [text, setText] = useState('') \r\n    const [error, setError] = useState(true) //переменная для блокировки кнопки добавления (защита от добавления пустого todo)\r\n\r\n    const dispatch = useDispatch()\r\n    const todo = useSelector(state => state.todo.todos) //получаем данные из reducer\r\n\r\n    //добавление посимвольно текста todo с помощью useState\r\n    const onchangeHandler = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    // добавление нового todo в state redux\r\n    const addTodo = () => {\r\n        setText('')\r\n        const dateInMs = Date.now()\r\n        const time = new Date(dateInMs).toLocaleTimeString()\r\n        const newTodo = {\r\n            text,\r\n            dataTime: time,\r\n            isComplete: false\r\n        }\r\n        dispatch({ type: \"ADD_TODO\", payload: newTodo })\r\n    }\r\n\r\n    // использование useEffect для изменения переменной блокировки (error)\r\n    useEffect(() => {\r\n        if (text.length > 0) {\r\n            setError(false)\r\n        }\r\n        else (setError(true))\r\n    });\r\n \r\n    return (\r\n        <div>\r\n            <Typography component=\"h1\" variant=\"h4\"\r\n            color=\"primary\"\r\n                sx={{\r\n                    marginTop: 4,\r\n                    textAlign: \"center\",\r\n                }}\r\n            >\r\n                TODO List\r\n            </Typography>\r\n            <div>\r\n                <Card sx={{ display: 'flex' }}>\r\n                    <CardContent sx={{ flex: 1 }}>\r\n                        <TextField\r\n                            size=\"medium\"\r\n                            margin=\"normal\"\r\n                            id=\"text\"\r\n                            label=\"Задача\"\r\n                            name=\"text\"\r\n                            value={text}\r\n                            autoComplete=\"text\"\r\n                            autoFocus\r\n                            onChange={onchangeHandler}\r\n                        />\r\n                        <Button\r\n                            size=\"large\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={error}\r\n                            onClick={addTodo}\r\n                            sx={{ mt: 3, ml: 2 }}\r\n                        >\r\n                            Добавить\r\n                        </Button>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n\r\n            {todo.length > 0 ? (\r\n                <div>\r\n                    {todo.map((todo) => (\r\n                        <TodoItem key={todo.dataTime} todo={todo} />\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <Typography \r\n                    sx={{\r\n                        marginTop: 4,\r\n                        textAlign: \"center\",\r\n                    }}\r\n                >\r\n                    Список дел пуст\r\n                </Typography>\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList","import './App.css';\nimport TodoList from \"./components/TodoList/TodoList.jsx\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const defaultState = {\r\n    todos: []\r\n\r\n}\r\n\r\nexport const todoReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_TODO\": // добавление нового todo с проверкой на повторение текста задания\r\n\r\n            if ((state.todos.filter(todo => todo.text === action.payload.text)).length > 0) {\r\n                return state\r\n            }\r\n            else {\r\n                return { ...state, todos: [...state.todos, action.payload] }\r\n            }\r\n        case \"REMOVE_TODO\":\r\n            return { ...state, todos: state.todos.filter(todo => todo.dataTime !== action.payload) } // фильтрация для исключения из состояния выбранного todo\r\n        case \"CHANGE_TODO\":  //изменение текста todo, с проверкой на повторение текста задания\r\n            if ((state.todos.filter(todo => todo.text === action.payload.text)).length > 0) {\r\n                return state\r\n            }\r\n            else {\r\n                return {\r\n                    ...state, todos: state.todos.map(todos =>\r\n                        (todos.dataTime === action.payload.dataTime)\r\n                            ? { ...todos, text: action.payload.text }\r\n                            : todos\r\n                    )\r\n                }\r\n            }\r\n        case \"COMPLETE_TODO\": //изменение состояния выполненности\r\n            return {\r\n                ...state, todos: state.todos.map(todos =>\r\n                    (todos.dataTime === action.payload)\r\n                        ? { ...todos, isComplete: !todos.isComplete }\r\n                        : todos\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from \"redux\"\r\nimport { todoReducer } from \"./todoReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    todo: todoReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport {store} from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}